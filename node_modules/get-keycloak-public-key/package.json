{
  "_from": "get-keycloak-public-key",
  "_id": "get-keycloak-public-key@1.0.3",
  "_inBundle": false,
  "_integrity": "sha512-wqquPctyUEPqsNumFR6hyMz+EiVYWlzkjhBFJU9lSMU2y/Shp0i6eyveJk2gtvih4m+/DSyh4DaUAh6J/ZRtag==",
  "_location": "/get-keycloak-public-key",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "get-keycloak-public-key",
    "fetchSpec": "latest",
    "name": "get-keycloak-public-key",
    "raw": "get-keycloak-public-key",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/get-keycloak-public-key/-/get-keycloak-public-key-1.0.3.tgz",
  "_shasum": "e92618331836d6e07bef1f5f2b8db17e28f76c5d",
  "_shrinkwrap": null,
  "_spec": "get-keycloak-public-key",
  "_where": "D:\\nodekc\\node-kc",
  "author": {
    "email": "thraex.aquator@gmail.com",
    "name": "István Rábel"
  },
  "bugs": {
    "url": "https://gitlab.com/aquator/node-get-keycloak-public-key/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Fetches the openid-connect PEM public key for a specific KID for validating JWT provided by Keycloak.",
  "devDependencies": {
    "eslint": "^4.19.1",
    "eslint-config-airbnb-base": "^12.1.0",
    "eslint-plugin-import": "^2.12.0",
    "nock": "^9.3.2",
    "tap": "^12.0.1"
  },
  "files": [
    "test.js"
  ],
  "homepage": "https://gitlab.com/aquator/node-get-keycloak-public-key",
  "keywords": [
    "JWT",
    "PEM",
    "keycloak"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "get-keycloak-public-key",
  "optionalDependencies": {},
  "readme": "# Get KeyCloak Public Key [![pipeline status](https://gitlab.com/aquator/node-get-keycloak-public-key/badges/master/pipeline.svg)](https://gitlab.com/aquator/node-get-keycloak-public-key/commits/master) [![coverage report](https://gitlab.com/aquator/node-get-keycloak-public-key/badges/master/coverage.svg)](https://gitlab.com/aquator/node-get-keycloak-public-key/commits/master) [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)  [![Known Vulnerabilities](https://snyk.io/test/npm/get-keycloak-public-key/badge.svg)](https://snyk.io/test/npm/get-keycloak-public-key) [![Downloads Counter](https://img.shields.io/npm/dt/get-keycloak-public-key.svg)](https://www.npmjs.com/package/get-keycloak-public-key)\nProvides access to PEM Public Keys from a [KeyCloak][1] server for [JWT][2] validation.\n\n## Introduction\n[KeyCloak][1] has a bunch of libraries, but for [NodeJs][3] the only solution is a [Connect based adapter][4]. In case you want to use [koa][5], or something else, you are toast with your token.\n\nThis module provides access to the PEM encoded Public Key used for the token based on the KID value, so you can validate the token with anything you want.\n\nThe module has no dependencies, the algorithm used to reconstruct the PEM encoded value from the modulus and the exponent is taken from [tracker1's solution]( https://github.com/tracker1/node-rsa-pem-from-mod-exp).\n\n## Features\nThe idea is to keep this simple and stupid, so nothing fancy is included. It can download the certificates JSON from a KeyCloak server, find the one with matching KID value, and reconstruct the Public Key in PEM format. End of story.\n\nIf you need improved behavior like caching of Public Keys, you can easily implement one.\n\n## Installation\n```bash\n$ npm install --save get-keycloak-public-key\n```\n\n## Usage\n```javascript\nconst KeyCloakCerts = require('get-keycloak-public-key');\n\nconst keyCloakCerts = new KeyCloakCerts('https://my-keycloak.com', 'my-realm');\n\n// You can also pass the full URL instead, as a single argument:\n// 'https://my-keycloak.com/auth/realms/my-realm/protocol/openid-connect/certs'\n\nconst publicKey = keyCloakCerts.fetch('my-kid')\n```\n\n## Example\nVerifying the token using [koa][5] and [jsonwebtoken][6]:\n```javascript\nconst Koa = require('koa');\nconst KeyCloakCerts = require('get-keycloak-public-key');\nconst jwt = require('jsonwebtoken');\n\nconst keyCloakCerts = new KeyCloakCerts('https://my-keycloak.com', 'my-realm');\nconst app = new Koa();\napp.use(async (ctx) => {\n  // Check the Authorization header\n  if (!(ctx.request.header.autorization && ctx.request.header.authorization.startsWith('Bearer '))) {\n    // Authorization header is missing\n    ctx.status = 401;\n    return;\n  }\n\n  // Get the token from the Authorization header, skip 'Bearer ' prefix\n  const token = ctx.request.header.authorization.substr(7);\n\n  // decode the token without verification to have the kid value\n  const kid = jwt.decode(token, { complete: true }).header.kid;\n\n  // fetch the PEM Public Key\n  const publicKey = await keyCloakCerts.fetch(kid);\n\n  if (publicKey) {\n    try {\n      // Verify and decode the token\n      const decoded = jwt.verify(token, publicKey);\n      ctx.body = decoded;\n    } catch (error) {\n      // Token is not valid\n      process.stderr.write(error.toString());\n      ctx.status = 401;\n    }\n  } else {\n    // KeyCloak has no Public Key for the specified KID\n    ctx.status = 401;\n  }\n});\napp.listen(3000);\n```\n\n[1]: http://www.keycloak.org/\n[2]: https://jwt.io/\n[3]: https://nodejs.org/en/\n[4]: https://github.com/keycloak/keycloak-nodejs-connect\n[5]: http://koajs.com/\n[6]: https://github.com/auth0/node-jsonwebtoken\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://gitlab.com/aquator/node-get-keycloak-public-key.git"
  },
  "scripts": {
    "coverage": "tap test.js --coverage",
    "lint": "eslint *.js",
    "test": "tap test.js"
  },
  "version": "1.0.3"
}
